@SoftDrinkMachineARM
@ Use these command to assemble, link and run this program
@    as -o SoftDrinkMachineARM.o SoftDrinkMachineARM.s
@    gcc -o SoftDrinkMachineARM SoftDrinkMachineARM.o
@    ./SoftDrinkMachineARM ;echo $?

.global main

@Display a welcome message and instructions
display:

  ldr r0, =welcomeMessage
  bl printf

@Read coin input
input:
  ldr r0, =instructionMessage
  bl printf

  ldr r0, =coinInputPattern @set up to read in one character
  ldr r1, =coinInput        @load r1 with the address of where input value will be stored
  bl scanf                  @scan the keyboard

@Test print coinInput
printTest:
  ldr r2, =coinInput        @ Put the address of the input value into r2
  ldr r1,[r2]               @ Read the contents of charInput and store in r1 so that it can be printed
  ldr r0, =printTestCharacter
  bl printf

@Verify coin input is valid
inputValidate:
  ldr r3, [r2]              @r2 contains coinInput, put address of input into r3
  cmp r3, #66               @Compare coinInput to ascii value of B
  be bill                   @if equal to B, branch to bill

  cmp r3, #68               @Compare coinInput to ascii value of D
  be dime                   @if equal to D, branch to dime

  cmp r3, #78               @Compare coinInput to ascii value of N
  be nickel                 @if equal to N, branch to nickel

  cmp r3, #81               @Compare coinInput to ascii value of Q
  be quarter                @if equal to Q, branch to quarter

@Print invalid input message, branch back to input
invalid:                  @if reach this label, coinInput is invalid
  ldr r0, =invalidInputMessage
  bl printf
  b input

@Update inputTotal and Display
bill:


dime:

nickel:

quarter:



  bill:

@*******************
@ End of code. Force the exit and return control to OS
myexit:

  mov r7, #0x01 @SVC call to exit
  svc 0         @Make the system call.

@Data
.data

@Printed Messages
  .balign 4
  welcomeMessage: .asciz "Welcome to Liv's soft drink vending machine. Cost of Coke, Sprite, Dr. Pepper, Diet Coke, and Mellow Yellow is 55 cents. Please enter N, D, Q, or B to input a nickel, dime, quarter, or 1 dollar bill. \n"

  instructionMessage: .asciz "Enter money nickel (N), dime (D), quarter (Q), and one dollar bill (B).\n"

  invalidInputMessage: .asciz "You have entered an invalid value. \n"


@Stored Values
  .balign 4
  coinInputPattern:.asciz "%s" @ string format for read- works with character too

  .balign 4
  cointInput: .word 0 @ Location used to store the user input.

  .balign 4
  printTestCharacter: .asciz "You read in: %c \n"

//Lab 4
main:
@*******************
print_Even:
@*******************
@   Print each even number from 1 to 25, print sum of even numbers
even:

    ldr r0, =num
    mov r1, #1
    bl printf
    ldr r0, =num
    mov r1, #2
    bl printf

    mov r8, #0       /* r8 ← 0 */
    mov r9, #2       /* r9 ← 1 */

loop:
    cmp r9, #25      /* compare r9 and 25 */
    bgt printeven    /* branch if r9 > 25 to end */
    add r8, r8, r9   /* r8 ← r8 + r9 */
    add r9, r9, #2   /* r9 ← r9 + 2 */
    ldr r0, =num
    mov r1, r9
    bl printf

    b loop

printeven:
    ldr r0, =evensum
    mov r1, r8
    bl printf

@*******************
print_Odd:
@*******************
@   Print each odd number from 1 to 25, print sum of odd numbers
odd:
    ldr r0, =num
    mov r1, #1
    bl printf

    mov r4, #0       /* r4 ← 0 */
    mov r5, #1       /* r5 ← 1 */

loop2:
    cmp r5, #25      /* compare r5 and 25 */
    bgt printodd    /* branch if r5 > 25 to end */
    add r4, r4, r5   /* r4 ← r4 + r5 */
    add r5, r5, #2   /* r5 ← r5 + 2 */
    ldr r0, =num
    mov r1, r5
    bl printf
    b loop2

printodd:
    ldr r0, =oddsum
    mov r1, r4
    bl printf

@*******************
print_Sum:
@*******************
@   Print sum of both numbers

    add r7, r4, r8
    ldr r0, =bothsum
    mov r1, r7
    bl printf

@*******************
myexit:
@*******************
@ End of my code. Force the exit and return control to OS

   mov r7, #0x01 @SVC call to exit
   svc 0         @Make the system call.

.data
.balign 4
num: .asciz "%d\n"

.balign 4
evensum: .asciz "Sum of even numbers: %d\n"

.balign 4
oddsum: .asciz "Sum of odd numbers: %d\n"

.balign 4
bothsum: .asciz "Sum of all numbers: %d\n"
